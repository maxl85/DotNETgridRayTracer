//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.ClientServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientServiceReference.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Perfomance", ReplyAction="http://tempuri.org/IClientService/PerfomanceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Background))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Camera))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Vector))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Light[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Light))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.SphereShape))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.BaseShape))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.ChessboardMaterial))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.BaseMaterial))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.PlaneShape))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.SolidMaterial))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.RayTracer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.AntiAliasing))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<double, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Rectangle))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Bitmap))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Image))]
        System.Tuple<double, int> Perfomance(RayTracer.Scene scene, System.Drawing.Rectangle viewport, RayTracer.RayTracer raytracer, int step, int number);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientService/Perfomance", ReplyAction="http://tempuri.org/IClientService/PerfomanceResponse")]
        System.IAsyncResult BeginPerfomance(RayTracer.Scene scene, System.Drawing.Rectangle viewport, RayTracer.RayTracer raytracer, int step, int number, System.AsyncCallback callback, object asyncState);
        
        System.Tuple<double, int> EndPerfomance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/CheckConnection", ReplyAction="http://tempuri.org/IClientService/CheckConnectionResponse")]
        bool CheckConnection();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientService/CheckConnection", ReplyAction="http://tempuri.org/IClientService/CheckConnectionResponse")]
        System.IAsyncResult BeginCheckConnection(System.AsyncCallback callback, object asyncState);
        
        bool EndCheckConnection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/RayTraceRows", ReplyAction="http://tempuri.org/IClientService/RayTraceRowsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Background))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Color))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Camera))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Vector))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Light[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.Light))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.SphereShape))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.BaseShape))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.ChessboardMaterial))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.BaseMaterial))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.PlaneShape))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.SolidMaterial))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.RayTracer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RayTracer.AntiAliasing))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<double, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Rectangle))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Bitmap))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Image))]
        System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime> RayTraceRows(RayTracer.Scene scene, System.Drawing.Rectangle viewport, int startRow, int numberOfRowsToTrace, RayTracer.RayTracer raytracer, int numberOfRange);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientService/RayTraceRows", ReplyAction="http://tempuri.org/IClientService/RayTraceRowsResponse")]
        System.IAsyncResult BeginRayTraceRows(RayTracer.Scene scene, System.Drawing.Rectangle viewport, int startRow, int numberOfRowsToTrace, RayTracer.RayTracer raytracer, int numberOfRange, System.AsyncCallback callback, object asyncState);
        
        System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime> EndRayTraceRows(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : Server.ClientServiceReference.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PerfomanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PerfomanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Tuple<double, int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Tuple<double, int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RayTraceRowsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RayTraceRowsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<Server.ClientServiceReference.IClientService>, Server.ClientServiceReference.IClientService {
        
        private BeginOperationDelegate onBeginPerfomanceDelegate;
        
        private EndOperationDelegate onEndPerfomanceDelegate;
        
        private System.Threading.SendOrPostCallback onPerfomanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckConnectionDelegate;
        
        private EndOperationDelegate onEndCheckConnectionDelegate;
        
        private System.Threading.SendOrPostCallback onCheckConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRayTraceRowsDelegate;
        
        private EndOperationDelegate onEndRayTraceRowsDelegate;
        
        private System.Threading.SendOrPostCallback onRayTraceRowsCompletedDelegate;
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<PerfomanceCompletedEventArgs> PerfomanceCompleted;
        
        public event System.EventHandler<CheckConnectionCompletedEventArgs> CheckConnectionCompleted;
        
        public event System.EventHandler<RayTraceRowsCompletedEventArgs> RayTraceRowsCompleted;
        
        public System.Tuple<double, int> Perfomance(RayTracer.Scene scene, System.Drawing.Rectangle viewport, RayTracer.RayTracer raytracer, int step, int number) {
            return base.Channel.Perfomance(scene, viewport, raytracer, step, number);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPerfomance(RayTracer.Scene scene, System.Drawing.Rectangle viewport, RayTracer.RayTracer raytracer, int step, int number, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPerfomance(scene, viewport, raytracer, step, number, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Tuple<double, int> EndPerfomance(System.IAsyncResult result) {
            return base.Channel.EndPerfomance(result);
        }
        
        private System.IAsyncResult OnBeginPerfomance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RayTracer.Scene scene = ((RayTracer.Scene)(inValues[0]));
            System.Drawing.Rectangle viewport = ((System.Drawing.Rectangle)(inValues[1]));
            RayTracer.RayTracer raytracer = ((RayTracer.RayTracer)(inValues[2]));
            int step = ((int)(inValues[3]));
            int number = ((int)(inValues[4]));
            return this.BeginPerfomance(scene, viewport, raytracer, step, number, callback, asyncState);
        }
        
        private object[] OnEndPerfomance(System.IAsyncResult result) {
            System.Tuple<double, int> retVal = this.EndPerfomance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPerfomanceCompleted(object state) {
            if ((this.PerfomanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PerfomanceCompleted(this, new PerfomanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PerfomanceAsync(RayTracer.Scene scene, System.Drawing.Rectangle viewport, RayTracer.RayTracer raytracer, int step, int number) {
            this.PerfomanceAsync(scene, viewport, raytracer, step, number, null);
        }
        
        public void PerfomanceAsync(RayTracer.Scene scene, System.Drawing.Rectangle viewport, RayTracer.RayTracer raytracer, int step, int number, object userState) {
            if ((this.onBeginPerfomanceDelegate == null)) {
                this.onBeginPerfomanceDelegate = new BeginOperationDelegate(this.OnBeginPerfomance);
            }
            if ((this.onEndPerfomanceDelegate == null)) {
                this.onEndPerfomanceDelegate = new EndOperationDelegate(this.OnEndPerfomance);
            }
            if ((this.onPerfomanceCompletedDelegate == null)) {
                this.onPerfomanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPerfomanceCompleted);
            }
            base.InvokeAsync(this.onBeginPerfomanceDelegate, new object[] {
                        scene,
                        viewport,
                        raytracer,
                        step,
                        number}, this.onEndPerfomanceDelegate, this.onPerfomanceCompletedDelegate, userState);
        }
        
        public bool CheckConnection() {
            return base.Channel.CheckConnection();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckConnection(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckConnection(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckConnection(System.IAsyncResult result) {
            return base.Channel.EndCheckConnection(result);
        }
        
        private System.IAsyncResult OnBeginCheckConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginCheckConnection(callback, asyncState);
        }
        
        private object[] OnEndCheckConnection(System.IAsyncResult result) {
            bool retVal = this.EndCheckConnection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckConnectionCompleted(object state) {
            if ((this.CheckConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckConnectionCompleted(this, new CheckConnectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckConnectionAsync() {
            this.CheckConnectionAsync(null);
        }
        
        public void CheckConnectionAsync(object userState) {
            if ((this.onBeginCheckConnectionDelegate == null)) {
                this.onBeginCheckConnectionDelegate = new BeginOperationDelegate(this.OnBeginCheckConnection);
            }
            if ((this.onEndCheckConnectionDelegate == null)) {
                this.onEndCheckConnectionDelegate = new EndOperationDelegate(this.OnEndCheckConnection);
            }
            if ((this.onCheckConnectionCompletedDelegate == null)) {
                this.onCheckConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckConnectionCompleted);
            }
            base.InvokeAsync(this.onBeginCheckConnectionDelegate, null, this.onEndCheckConnectionDelegate, this.onCheckConnectionCompletedDelegate, userState);
        }
        
        public System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime> RayTraceRows(RayTracer.Scene scene, System.Drawing.Rectangle viewport, int startRow, int numberOfRowsToTrace, RayTracer.RayTracer raytracer, int numberOfRange) {
            return base.Channel.RayTraceRows(scene, viewport, startRow, numberOfRowsToTrace, raytracer, numberOfRange);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRayTraceRows(RayTracer.Scene scene, System.Drawing.Rectangle viewport, int startRow, int numberOfRowsToTrace, RayTracer.RayTracer raytracer, int numberOfRange, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRayTraceRows(scene, viewport, startRow, numberOfRowsToTrace, raytracer, numberOfRange, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime> EndRayTraceRows(System.IAsyncResult result) {
            return base.Channel.EndRayTraceRows(result);
        }
        
        private System.IAsyncResult OnBeginRayTraceRows(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RayTracer.Scene scene = ((RayTracer.Scene)(inValues[0]));
            System.Drawing.Rectangle viewport = ((System.Drawing.Rectangle)(inValues[1]));
            int startRow = ((int)(inValues[2]));
            int numberOfRowsToTrace = ((int)(inValues[3]));
            RayTracer.RayTracer raytracer = ((RayTracer.RayTracer)(inValues[4]));
            int numberOfRange = ((int)(inValues[5]));
            return this.BeginRayTraceRows(scene, viewport, startRow, numberOfRowsToTrace, raytracer, numberOfRange, callback, asyncState);
        }
        
        private object[] OnEndRayTraceRows(System.IAsyncResult result) {
            System.Tuple<System.Drawing.Bitmap, int, RayTracer.RayTracer, int, System.DateTime> retVal = this.EndRayTraceRows(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRayTraceRowsCompleted(object state) {
            if ((this.RayTraceRowsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RayTraceRowsCompleted(this, new RayTraceRowsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RayTraceRowsAsync(RayTracer.Scene scene, System.Drawing.Rectangle viewport, int startRow, int numberOfRowsToTrace, RayTracer.RayTracer raytracer, int numberOfRange) {
            this.RayTraceRowsAsync(scene, viewport, startRow, numberOfRowsToTrace, raytracer, numberOfRange, null);
        }
        
        public void RayTraceRowsAsync(RayTracer.Scene scene, System.Drawing.Rectangle viewport, int startRow, int numberOfRowsToTrace, RayTracer.RayTracer raytracer, int numberOfRange, object userState) {
            if ((this.onBeginRayTraceRowsDelegate == null)) {
                this.onBeginRayTraceRowsDelegate = new BeginOperationDelegate(this.OnBeginRayTraceRows);
            }
            if ((this.onEndRayTraceRowsDelegate == null)) {
                this.onEndRayTraceRowsDelegate = new EndOperationDelegate(this.OnEndRayTraceRows);
            }
            if ((this.onRayTraceRowsCompletedDelegate == null)) {
                this.onRayTraceRowsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRayTraceRowsCompleted);
            }
            base.InvokeAsync(this.onBeginRayTraceRowsDelegate, new object[] {
                        scene,
                        viewport,
                        startRow,
                        numberOfRowsToTrace,
                        raytracer,
                        numberOfRange}, this.onEndRayTraceRowsDelegate, this.onRayTraceRowsCompletedDelegate, userState);
        }
    }
}
